#include <stdio.h>
#include <stdlib.h>

#define MAX 100  

typedef struct {
    int vertices;
    int adjMatrix[MAX][MAX];
} Graph;

Graph* createGraph(int vertices);
void addEdge(Graph* graph, int src, int dest);
void printAdjMatrix(Graph* graph);
void BFS(Graph* graph, int startVertex);
void DFS(Graph* graph, int startVertex, int* visited);

typedef struct Queue {
    int items[MAX];
    int front, rear;
} Queue;

Queue* createQueue();
void enqueue(Queue* queue, int value);
int dequeue(Queue* queue);
int isEmpty(Queue* queue);

int main() {
    int vertices = 5;
    Graph* graph = createGraph(vertices);

    // Add edges
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);

    printf("Adjacency Matrix:\n");
    printAdjMatrix(graph);

    
    printf("\nBreadth-First Search (starting from vertex 0):\n");
    BFS(graph, 0);

    
    printf("\nDepth-First Search (starting from vertex 0):\n");
    int visited[MAX] = {0};
    DFS(graph, 0, visited);

    return 0;
}

Graph* createGraph(int vertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->vertices = vertices;

    for (int i = 0; i < vertices; i++) {
        for (int j = 0; j < vertices; j++) {
            graph->adjMatrix[i][j] = 0;
        }
    }
    return graph;
}

void addEdge(Graph* graph, int src, int dest) {
    graph->adjMatrix[src][dest] = 1;
    graph->adjMatrix[dest][src] = 1;  // For undirected graph
}

void printAdjMatrix(Graph* graph) {
    for (int i = 0; i < graph->vertices; i++) {
        for (int j = 0; j < graph->vertices; j++) {
            printf("%d ", graph->adjMatrix[i][j]);
        }
        printf("\n");
    }
}

void BFS(Graph* graph, int startVertex) {
    int visited[MAX] = {0};
    Queue* queue = createQueue();

    visited[startVertex] = 1;
    enqueue(queue, startVertex);

    while (!isEmpty(queue)) {
        int currentVertex = dequeue(queue);
        printf("%d ", currentVertex);

        // Visit adjacent vertices
        for (int i = 0; i < graph->vertices; i++) {
            if (graph->adjMatrix[currentVertex][i] == 1 && !visited[i]) {
                visited[i] = 1;
                enqueue(queue, i);
            }
        }
    }
}

void DFS(Graph* graph, int startVertex, int* visited) {
    visited[startVertex] = 1;
    printf("%d ", startVertex);

    for (int i = 0; i < graph->vertices; i++) {
        if (graph->adjMatrix[startVertex][i] == 1 && !visited[i]) {
            DFS(graph, i, visited);
        }
    }
}

Queue* createQueue() {
    Queue* queue = (Queue*)malloc(sizeof(Queue));
    queue->front = -1;
    queue->rear = -1;
    return queue;
}

void enqueue(Queue* queue, int value) {
    if (queue->rear == MAX - 1)
        return;
    if (queue->front == -1)
        queue->front = 0;
    queue->rear++;
    queue->items[queue->rear] = value;
}

int dequeue(Queue* queue) {
    if (isEmpty(queue))
        return -1;
    int item = queue->items[queue->front];
    queue->front++;
    if (queue->front > queue->rear) {
        queue->front = queue->rear = -1;
    }
    return item;
}

int isEmpty(Queue* queue) {
    return queue->rear == -1;
}
