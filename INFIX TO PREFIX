#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX 100


struct Stack {
    int top;
    char items[MAX];
};


void initStack(struct Stack *s);
int isFull(struct Stack *s);
int isEmpty(struct Stack *s);
void push(struct Stack *s, char item);
char pop(struct Stack *s);
char peek(struct Stack *s);
int precedence(char op);
void infixToPrefix(char *infix, char *prefix);
void reverse(char *exp);
void menu();


void initStack(struct Stack *s) {
    s->top = -1;
}


int isFull(struct Stack *s) {
    return s->top == MAX - 1;
}


int isEmpty(struct Stack *s) {
    return s->top == -1;
}


void push(struct Stack *s, char item) {
    if (!isFull(s)) {
        s->items[++(s->top)] = item;
    } else {
        printf("Stack is full!\n");
    }
}


char pop(struct Stack *s) {
    if (!isEmpty(s)) {
        return s->items[(s->top)--];
    }
    return '\0'; 
}


char peek(struct Stack *s) {
    if (!isEmpty(s)) {
        return s->items[s->top];
    }
    return '\0'; 
}


int precedence(char op) {
    switch (op) {
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
        default:
            return 0;
    }
}


void reverse(char *exp) {
    int n = strlen(exp);
    for (int i = 0; i < n / 2; i++) {
        char temp = exp[i];
        exp[i] = exp[n - i - 1];
        exp[n - i - 1] = temp;
    }
}


void infixToPrefix(char *infix, char *prefix) {
    struct Stack s;
    initStack(&s);
    reverse(infix); 
    int j = 0;

    for (int i = 0; infix[i] != '\0'; i++) {
        char ch = infix[i];
        
        if (ch == '(') {
            ch = ')';
        } else if (ch == ')') {
            ch = '(';
        }

        if (isalnum(ch)) { 
            prefix[j++] = ch;
        } else if (ch == '(') { 
            push(&s, ch);
        } else if (ch == ')') { 
            while (!isEmpty(&s) && peek(&s) != '(') {
                prefix[j++] = pop(&s);
            }
            pop(&s); 
        } else { 
            while (!isEmpty(&s) && precedence(peek(&s)) > precedence(ch)) {
                prefix[j++] = pop(&s);
            }
            push(&s, ch);
        }
    }

   
    while (!isEmpty(&s)) {
        prefix[j++] = pop(&s);
    }
    
    prefix[j] = '\0'; 
    reverse(prefix);  
}


void menu() {
    while (1) {
        printf("\nMenu:\n");
        printf("1. Convert Infix to Prefix\n");
        printf("2. Exit\n");
        printf("Enter your choice: ");
        
        int choice;
        scanf("%d", &choice);
        
        if (choice == 1) {
            char infix[MAX], prefix[MAX];
            printf("Enter infix expression: ");
            scanf("%s", infix);
            infixToPrefix(infix, prefix);
            printf("Prefix expression: %s\n", prefix);
        } else if (choice == 2) {
            printf("Exiting...\n");
            break;
        } else {
            printf("Invalid choice! Please try again.\n");
        }
    }
}


int main() {
    menu();
    return 0;
}
